"""
https://www.hackerrank.com/challenges/the-minion-game/problem?isFullScreen=true
Kevin and Stuart want to play the 'The Minion Game'.

Game Rules

Both players are given the same string, .
Both players have to make substrings using the letters of the string .
Stuart has to make words starting with consonants.
    Kevin has to make words starting with vowels.
    The game ends when both players have made all possible substrings.

Scoring
A player gets +1 point for each occurrence of the substring in the string .

For Example:
String  = BANANA
Kevin's vowel beginning word = ANA
Here, ANA occurs twice in BANANA. Hence, Kevin will get 2 Points.

For better understanding, see the image below:

banana.png

Your task is to determine the winner of the game and their score.

Function Description

Complete the minion_game in the editor below.

minion_game has the following parameters:

string string: the string to analyze
Prints

string: the winner's name and score, separated by a space on one line, or Draw if there is no winner
Input Format

A single line of input containing the string .
Note: The string  will contain only uppercase letters: .

Constraints



Sample Input

BANANA
Sample Output

Stuart 12
Note :
Vowels are only defined as . In this problem,  is not considered a vowel.
"""

from itertools import combinations


def minion_game(string):
    stuart_score = 0
    kevin_score = 0

    '''
    For example: 
    short string: BANANA
    long string
    '''

    '''
    #FIRST METHOD
    This is correct logic wise however for very long strings, it throws MemoryError
    
    
    combos = [string[i:j] for i, j in combinations(range(len(string) + 1), 2)]
    d = dict()
    for i in combos:
        d[i] = d.get(i, 0) + 1
    #FIRST METHOD
    '''

    '''
    #SECOND METHOD
    This is optimized version of FIRST METHOD in terms of memory but runs for longer
    duration when the input is long string 
    
    Example is same 
    d = dict()
    for i, j in combinations(range(len(string) + 1), 2):
        d[string[i:j]] = d.get(string[i:j], 0) + 1
    #SECOND METHOD
    '''
    '''
    Below is the continution code for first and second methods
    for combo, count in d.items():
        if combo[0] in 'AEIOUaeiou':
            kevin_score += count
        else:
            stuart_score += count
    '''

    str_len = len(string)
    for i in range(str_len):
        if string[i] in "AEIOU":
            kevin_score += (str_len)-i
        else:
            stuart_score += (str_len)-i

    print('Kevin ', kevin_score) if kevin_score > stuart_score else \
        print('Stuart ', stuart_score) if kevin_score != stuart_score else \
            print('Draw')


if __name__ == '__main__':
    s = input()
    minion_game(s)
